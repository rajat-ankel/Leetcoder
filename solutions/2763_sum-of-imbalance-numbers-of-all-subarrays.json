{
    "problemName": "sum-of-imbalance-numbers-of-all-subarrays",
    "language": "cpp",
    "code": "class  Solution  {   public :         int  sumImbalanceNumbers ( vector < int >&  nums )  {   const  int  n  =  nums . size ();   int  ans  =  0 ;           vector < int >  left ( n );     vector < int >  right ( n );   vector < int >  numToIndex ( n  +  2 ,  -1 );   for  ( int  i  =  0 ;  i  <  n ;  ++ i )  {   left [ i ]  =  max ( numToIndex [ nums [ i ]],  numToIndex [ nums [ i ]  +  1 ]);   numToIndex [ nums [ i ]]  =  i ;   }   fill ( numToIndex . begin (),  numToIndex . end (),  n );   for  ( int  i  =  n  -  1 ;  i  >=  0 ;  -- i )  {   right [ i ]  =  numToIndex [ nums [ i ]  +  1 ];   numToIndex [ nums [ i ]]  =  i ;   }           for  ( int  i  =  0 ;  i  <  n ;  ++ i )   ans  +=  ( i  -  left [ i ])  *  ( right [ i ]  -  i );         return  ans  -  n  *  ( n  +  1 )  /  2 ;   }  }; "
}