{
    "problemName": "maximize-total-tastiness-of-purchased-fruits",
    "language": "cpp",
    "code": "class  Solution  {   public :   int  maxTastiness ( vector < int >&  price ,  vector < int >&  tastiness ,  int  maxAmount ,   int  maxCoupons )  {   const  int  n  =  price . size ();       vector < vector < vector < int >>>  dp (   n  +  1 ,  vector < vector < int >> ( maxAmount  +  1 ,  vector < int > ( maxCoupons  +  1 )));   for  ( int  i  =  1 ;  i  <=  n ;  ++ i )  {     const  int  currPrice  =  price [ i  -  1 ];   const  int  currTastiness  =  tastiness [ i  -  1 ];   for  ( int  amount  =  0 ;  amount  <=  maxAmount ;  ++ amount )  {   for  ( int  coupon  =  0 ;  coupon  <=  maxCoupons ;  ++ coupon )  {       dp [ i ][ amount ][ coupon ]  =  dp [ i  -  1 ][ amount ][ coupon ];     if  ( amount  >=  currPrice )   dp [ i ][ amount ][ coupon ]  =   max ( dp [ i ][ amount ][ coupon ],   dp [ i  -  1 ][ amount  -  currPrice ][ coupon ]  +  currTastiness );     if  ( coupon  >  0  &&  amount  >=  currPrice  /  2 )   dp [ i ][ amount ][ coupon ]  =  max (   dp [ i ][ amount ][ coupon ],   dp [ i  -  1 ][ amount  -  currPrice  /  2 ][ coupon  -  1 ]  +  currTastiness );   }   }   }   return  dp [ n ][ maxAmount ][ maxCoupons ];   }  }; "
}