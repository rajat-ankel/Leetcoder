{
    "problemName": "find-maximum-non-decreasing-array-length",
    "language": "cpp",
    "code": "class  Solution :  def  findMaximumLength ( self ,  nums :  List [ int ])  ->  int :  n  =  len ( nums )  kInf  =  10_000_000_000   prefix  =  list ( itertools . accumulate ( nums ,  initial = 0 ))    dp  =  [ 0 ]  *  ( n  +  1 )   last  =  [ 0 ]  +  [ kInf ]  *  n  for  i  in  range ( n ):  j  =  self . _findIndex ( i ,  prefix ,  last )  dp [ i  +  1 ]  =  max ( dp [ i ],  dp [ j ]  +  1 )  last [ i  +  1 ]  =  prefix [ i  +  1 ]  -  prefix [ j ]  return  dp [ n ]  def  _findIndex ( self ,  i :  int ,  prefix :  List [ int ],  last :  List [ int ])  ->  int :   \"\"\"Returns the index in [0..i].  Returns the maximum index j in [0..i] s.t.  prefix[i + 1] - prefix[j] >= last[j].  \"\"\"  for  j  in  range ( i ,  - 1 ,  - 1 ):  if  prefix [ i  +  1 ]  -  prefix [ j ]  >=  last [ j ]:  return  j "
}