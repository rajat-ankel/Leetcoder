{
    "problemName": "minimum-incompatibility",
    "language": "cpp",
    "code": "class  Solution  {   public :   int  minimumIncompatibility ( vector < int >&  nums ,  int  k )  {   constexpr  int  kMaxCompatibility  =  ( 16  -  1 )  *  ( 16  /  2 );   const  int  n  =  nums . size ();   const  int  subsetSize  =  n  /  k ;   const  int  maxMask  =  1  <<  n ;   const  vector < int >  incompatibilities  =   getIncompatibilities ( nums ,  subsetSize );       vector < int >  dp ( maxMask ,  kMaxCompatibility );   dp [ 0 ]  =  0 ;   for  ( unsigned  mask  =  1 ;  mask  <  maxMask ;  ++ mask )  {     if  ( popcount ( mask )  %  subsetSize  !=  0 )   continue ;     for  ( int  submask  =  mask ;  submask  >  0 ;  submask  =  ( submask  -  1 )  &  mask )   if  ( incompatibilities [ submask ]  !=  -1 )    dp [ mask ]  =   min ( dp [ mask ],  dp [ mask  -  submask ]  +  incompatibilities [ submask ]);   }   return  dp . back ()  ==  kMaxCompatibility  ?  -1  :  dp . back ();   }   private :   static  constexpr  int  kMaxNum  =  16 ;             vector < int >  getIncompatibilities ( const  vector < int >&  nums ,  int  subsetSize )  {   const  int  maxMask  =  1  <<  nums . size ();   vector < int >  incompatibilities ( maxMask ,  -1 );   for  ( unsigned  mask  =  0 ;  mask  <  maxMask ;  ++ mask )   if  ( popcount ( mask )  ==  subsetSize  &&  isUnique ( nums ,  mask ,  subsetSize ))   incompatibilities [ mask ]  =  getIncompatibility ( nums ,  mask );   return  incompatibilities ;   }             bool  isUnique ( const  vector < int >&  nums ,  int  mask ,  int  subsetSize )  {   unsigned  used  =  0 ;   for  ( int  i  =  0 ;  i  <  nums . size ();  ++ i )   if  ( mask  >>  i  &  1 )   used  |=  1  <<  nums [ i ];   return  popcount ( used )  ==  subsetSize ;   }       int  getIncompatibility ( const  vector < int >&  nums ,  int  mask )  {   int  mini  =  kMaxNum ;   int  maxi  =  0 ;   for  ( int  i  =  0 ;  i  <  nums . size ();  ++ i )   if  ( mask  >>  i  &  1 )  {   maxi  =  max ( maxi ,  nums [ i ]);   mini  =  min ( mini ,  nums [ i ]);   }   return  maxi  -  mini ;   }  }; "
}