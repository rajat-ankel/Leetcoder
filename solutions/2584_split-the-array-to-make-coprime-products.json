{
    "problemName": "split-the-array-to-make-coprime-products",
    "language": "cpp",
    "code": "class  Solution  {   public :   int  findValidSplit ( vector < int >&  nums )  {   unordered_map < int ,  int >  leftPrimeFactors ;   unordered_map < int ,  int >  rightPrimeFactors ;   for  ( const  int  num  :  nums )   for  ( const  int  primeFactor  :  getPrimeFactors ( num ))   ++ rightPrimeFactors [ primeFactor ];   for  ( int  i  =  0 ;  i  <  nums . size ()  -  1 ;  ++ i )  {   for  ( const  int  primeFactor  :  getPrimeFactors ( nums [ i ]))  {   if  ( -- rightPrimeFactors [ primeFactor ]  ==  0 )  {       rightPrimeFactors . erase ( primeFactor );   leftPrimeFactors . erase ( primeFactor );   }  else  {     ++ leftPrimeFactors [ primeFactor ];   }   }   if  ( leftPrimeFactors . empty ())   return  i ;   }   return  -1 ;   }   private :     vector < int >  getPrimeFactors ( int  num )  {   vector < int >  primeFactors ;   for  ( int  divisor  =  2 ;  divisor  <=  min ( 1000 ,  num );  ++ divisor )   if  ( num  %  divisor  ==  0 )  {   primeFactors . push_back ( divisor );   while  ( num  %  divisor  ==  0 )   num  /=  divisor ;   }     if  ( num  >  1 )   primeFactors . push_back ( num );   return  primeFactors ;   }  }; "
}