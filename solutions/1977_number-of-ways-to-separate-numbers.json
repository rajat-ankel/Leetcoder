{
    "problemName": "number-of-ways-to-separate-numbers",
    "language": "cpp",
    "code": "class  Solution  {   public :   int  numberOfCombinations ( string  num )  {   if  ( num [ 0 ]  ==  '0' )   return  0 ;   constexpr  int  kMod  =  1'000'000'007 ;   const  int  n  =  num . size ();       vector < vector < long >>  dp ( n ,  vector < long > ( n  +  1 ));     vector < vector < int >>  lcs ( n  +  1 ,  vector < int > ( n  +  1 ));   for  ( int  i  =  n  -  1 ;  i  >=  0 ;  -- i )   for  ( int  j  =  i  +  1 ;  j  <  n ;  ++ j )   if  ( num [ i ]  ==  num [ j ])   lcs [ i ][ j ]  =  lcs [ i  +  1 ][ j  +  1 ]  +  1 ;   for  ( int  i  =  0 ;  i  <  n ;  ++ i )   for  ( int  k  =  1 ;  k  <=  i  +  1 ;  ++ k )  {   dp [ i ][ k ]  +=  dp [ i ][ k  -  1 ];   dp [ i ][ k ]  %=  kMod ;     const  int  s  =  i  -  k  +  1 ;   if  ( num [ s ]  ==  '0' )       continue ;   if  ( s  ==  0 )  {     dp [ i ][ k ]  +=  1 ;   continue ;   }   if  ( s  <  k )  {       dp [ i ][ k ]  +=  dp [ s  -  1 ][ s ];   continue ;   }   const  int  l  =  lcs [ s  -  k ][ s ];   if  ( l  >=  k  ||  num [ s  -  k  +  l ]  <=  num [ s  +  l ])     dp [ i ][ k ]  +=  dp [ s  -  1 ][ k ];   else     dp [ i ][ k ]  +=  dp [ s  -  1 ][ k  -  1 ];   }   return  dp [ n  -  1 ][ n ]  %  kMod ;   }  }; "
}