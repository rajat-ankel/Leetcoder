{
    "problemName": "maximum-elegance-of-a-k-length-subsequence",
    "language": "cpp",
    "code": "class  Solution  {   public :   long  long  findMaximumElegance ( vector < vector < int >>&  items ,  int  k )  {   long  ans  =  0 ;   long  totalProfit  =  0 ;   unordered_set < int >  seenCategories ;   stack < int >  decreasingDuplicateProfits ;   ranges :: sort ( items ,  greater <> ());   for  ( int  i  =  0 ;  i  <  k ;  i ++ )  {   const  int  profit  =  items [ i ][ 0 ];   const  int  category  =  items [ i ][ 1 ];   totalProfit  +=  profit ;   if  ( seenCategories . count ( category ))   decreasingDuplicateProfits . push ( profit );   else   seenCategories . insert ( category );   }   ans  =  totalProfit  +   static_cast < long > ( seenCategories . size ())  *  seenCategories . size ();   for  ( int  i  =  k ;  i  <  items . size ();  ++ i )  {   const  int  profit  =  items [ i ][ 0 ];   const  int  category  =  items [ i ][ 1 ];   if  ( ! seenCategories . count ( category )  &&   ! decreasingDuplicateProfits . empty ())  {           totalProfit  -=  decreasingDuplicateProfits . top (),   decreasingDuplicateProfits . pop ();   totalProfit  +=  profit ;   seenCategories . insert ( category );   ans  =  max ( ans ,   static_cast < long > ( totalProfit  +   static_cast < long > ( seenCategories . size ())  *   seenCategories . size ()));   }   }   return  ans ;   }  }; "
}