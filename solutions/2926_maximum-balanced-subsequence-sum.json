{
    "problemName": "maximum-balanced-subsequence-sum",
    "language": "cpp",
    "code": "class  FenwickTree  {   public :   FenwickTree ( int  n )  :  vals ( n  +  1 )  {}     void  maximize ( int  i ,  long  val )  {   while  ( i  <  vals . size ())  {   vals [ i ]  =  max ( vals [ i ],  val );   i  +=  lowbit ( i );   }   }     long  get ( int  i )  const  {   long  res  =  0 ;   while  ( i  >  0 )  {   res  =  max ( res ,  vals [ i ]);   i  -=  lowbit ( i );   }   return  res ;   }   private :   vector < long >  vals ;   static  int  lowbit ( int  i )  {   return  i  &  - i ;   }  };  class  Solution  {   public :   long  long  maxBalancedSubsequenceSum ( vector < int >&  nums )  {               long  ans  =  LONG_MIN ;   FenwickTree  tree ( nums . size ());   for  ( const  auto &  [ _ ,  i ]  :  getPairs ( nums ))  {   const  long  subseqSum  =  tree . get ( i )  +  nums [ i ];   tree . maximize ( i  +  1 ,  subseqSum );   ans  =  max ( ans ,  subseqSum );   }   return  ans ;   }   private :   vector < pair < int ,  int >>  getPairs ( const  vector < int >&  nums )  {   vector < pair < int ,  int >>  pairs ;   for  ( int  i  =  0 ;  i  <  nums . size ();  ++ i )   pairs . emplace_back ( nums [ i ]  -  i ,  i );   ranges :: sort ( pairs );   return  pairs ;   }  }; "
}