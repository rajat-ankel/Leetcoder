{
    "problemName": "minimum-total-cost-to-make-arrays-unequal",
    "language": "cpp",
    "code": "class  Solution  {   public :   long  long  minimumTotalCost ( vector < int >&  nums1 ,  vector < int >&  nums2 )  {   const  int  n  =  nums1 . size ();   long  ans  =  0 ;   int  maxFreq  =  0 ;   int  maxFreqNum  =  0 ;   int  shouldBeSwapped  =  0 ;   vector < int >  conflictedNumCount ( n  +  1 );       for  ( int  i  =  0 ;  i  <  n ;  ++ i )   if  ( nums1 [ i ]  ==  nums2 [ i ])  {   const  int  conflictedNum  =  nums1 [ i ];   if  ( ++ conflictedNumCount [ conflictedNum ]  >  maxFreq )  {   maxFreq  =  conflictedNumCount [ conflictedNum ];   maxFreqNum  =  conflictedNum ;   }   ++ shouldBeSwapped ;   ans  +=  i ;   }       for  ( int  i  =  0 ;  i  <  n ;  ++ i )  {       if  ( maxFreq  *  2  <=  shouldBeSwapped )   break ;   if  ( nums1 [ i ]  ==  nums2 [ i ])   continue ;       if  ( nums1 [ i ]  ==  maxFreqNum  ||  nums2 [ i ]  ==  maxFreqNum )   continue ;   ++ shouldBeSwapped ;   ans  +=  i ;   }   return  maxFreq  *  2  >  shouldBeSwapped  ?  -1  :  ans ;   }  }; "
}