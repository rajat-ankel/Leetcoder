{
    "problemName": "candy-crush",
    "language": "cpp",
    "code": "class  Solution  {   public :   vector < vector < int >>  candyCrush ( vector < vector < int >>&  board )  {   const  int  m  =  board . size ();   const  int  n  =  board [ 0 ]. size ();   bool  haveCrushes  =  true ;   while  ( haveCrushes )  {   haveCrushes  =  false ;   for  ( int  i  =  0 ;  i  <  m ;  ++ i )   for  ( int  j  =  0 ;  j  <  n ;  ++ j )  {   const  int  val  =  abs ( board [ i ][ j ]);   if  ( val  ==  0 )   continue ;     if  ( j  +  2  <  n  &&  abs ( board [ i ][ j  +  1 ])  ==  val  &&   abs ( board [ i ][ j  +  2 ])  ==  val )  {   haveCrushes  =  true ;   for  ( int  k  =  j ;  k  <  j  +  3 ;  ++ k )   board [ i ][ k ]  =  - val ;   }     if  ( i  +  2  <  m  &&  abs ( board [ i  +  1 ][ j ])  ==  val  &&   abs ( board [ i  +  2 ][ j ])  ==  val )  {   haveCrushes  =  true ;   for  ( int  k  =  i ;  k  <  i  +  3 ;  ++ k )   board [ k ][ j ]  =  - val ;   }   }   if  ( haveCrushes )  {     for  ( int  j  =  0 ;  j  <  n ;  ++ j )  {   int  nextIndex  =  m  -  1 ;   for  ( int  i  =  m  -  1 ;  i  >=  0 ;  -- i )   if  ( board [ i ][ j ]  >  0 )   board [ nextIndex -- ][ j ]  =  board [ i ][ j ];     for  ( int  i  =  nextIndex ;  i  >=  0 ;  -- i )   board [ i ][ j ]  =  0 ;   }   }   }   return  board ;   }  }; "
}