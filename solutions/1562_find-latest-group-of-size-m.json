{
    "problemName": "find-latest-group-of-size-m",
    "language": "cpp",
    "code": "class  Solution  {   public :   int  findLatestStep ( vector < int >&  arr ,  int  m )  {   if  ( arr . size ()  ==  m )   return  arr . size ();   int  ans  =  -1 ;   int  step  =  0 ;       vector < int >  sizes ( arr . size ()  +  2 );   for  ( const  int  i  :  arr )  {   ++ step ;     if  ( sizes [ i  -  1 ]  ==  m  ||  sizes [ i  +  1 ]  ==  m )   ans  =  step  -  1 ;   const  int  head  =  i  -  sizes [ i  -  1 ];   const  int  tail  =  i  +  sizes [ i  +  1 ];   sizes [ head ]  =  tail  -  head  +  1 ;   sizes [ tail ]  =  tail  -  head  +  1 ;   }   return  ans ;   }  }; "
}