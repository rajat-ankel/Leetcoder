{
    "problemName": "data-stream-as-disjoint-intervals",
    "language": "cpp",
    "code": "class  SummaryRanges  {   public :   void  addNum ( int  val )  {   if  ( intervals . count ( val ))   return ;   const  int  lo  =  lowerKey ( val );   const  int  hi  =  higherKey ( val );       if  ( lo  >=  0  &&  hi  >=  0  &&  intervals [ lo ][ 1 ]  +  1  ==  val  &&  val  +  1  ==  hi )  {   intervals [ lo ][ 1 ]  =  intervals [ hi ][ 1 ];   intervals . erase ( hi );       }  else  if  ( lo  >=  0  &&  intervals [ lo ][ 1 ]  +  1  >=  val )  {   intervals [ lo ][ 1 ]  =  max ( intervals [ lo ][ 1 ],  val );   }  else  if  ( hi  >=  0  &&  val  +  1  ==  hi )  {     intervals [ val ]  =  { val ,  intervals [ hi ][ 1 ]};   intervals . erase ( hi );   }  else  {   intervals [ val ]  =  { val ,  val };   }   }   vector < vector < int >>  getIntervals ()  {   vector < vector < int >>  res ;   for  ( const  auto &  [ _ ,  interval ]  :  intervals )   res . push_back ( interval );   return  res ;   }   private :   map < int ,  vector < int >>  intervals ;      int  lowerKey ( int  key )  {   auto  it  =  intervals . lower_bound ( key );   if  ( it  ==  intervals . begin ())   return  -1 ;   return  ( -- it ) -> first ;   }     int  higherKey ( int  key )  {   const  auto  it  =  intervals . upper_bound ( key );   if  ( it  ==  intervals . cend ())   return  -1 ;   return  it -> first ;   }  }; "
}