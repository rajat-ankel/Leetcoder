{
    "problemName": "odd-even-jump",
    "language": "cpp",
    "code": "class  Solution  {   public :   int  oddEvenJumps ( vector < int >&  arr )  {   const  int  n  =  arr . size ();   map < int ,  int >  map ;      vector < bool >  inc ( n );     vector < bool >  dec ( n );   map [ arr [ n  -  1 ]]  =  n  -  1 ;   inc . back ()  =  true ;   dec . back ()  =  true ;   for  ( int  i  =  n  -  2 ;  i  >=  0 ;  -- i )  {   const  auto  lo  =  map . lower_bound ( arr [ i ]);    const  auto  hi  =  map . upper_bound ( arr [ i ]);    if  ( lo  !=  map . cend ())   inc [ i ]  =  dec [ lo -> second ];   if  ( hi  !=  map . cbegin ())   dec [ i ]  =  inc [ prev ( hi ) -> second ];   map [ arr [ i ]]  =  i ;   }   return  ranges :: count ( inc ,  true );   }  }; "
}