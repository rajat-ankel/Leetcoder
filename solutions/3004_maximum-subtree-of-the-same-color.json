{
    "problemName": "maximum-subtree-of-the-same-color",
    "language": "cpp",
    "code": "class  Solution  {   public :   int  maximumSubtreeSize ( vector < vector < int >>&  edges ,  vector < int >&  colors )  {   int  ans  =  1 ;   vector < vector < int >>  tree ( colors . size ());   for  ( const  vector < int >&  edge  :  edges )  {   const  int  u  =  edge [ 0 ];   const  int  v  =  edge [ 1 ];   tree [ u ]. push_back ( v );   }   dfs ( tree ,  0 ,  colors ,  ans );   return  ans ;   }   private :       int  dfs ( const  vector < vector < int >>&  tree ,  int  u ,  const  vector < int >&  colors ,   int &  ans )  {   int  res  =  1 ;   for  ( const  int  v  :  tree [ u ])  {   if  ( colors [ v ]  !=  colors [ u ])   res  =  -1 ;       const  int  subtreeSize  =  dfs ( tree ,  v ,  colors ,  ans );   if  ( subtreeSize  ==  -1 )   res  =  -1 ;   else  if  ( res  !=  -1 )   res  +=  subtreeSize ;   }   ans  =  max ( ans ,  res );   return  res ;   }  }; "
}