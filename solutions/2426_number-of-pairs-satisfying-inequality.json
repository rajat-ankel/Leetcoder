{
    "problemName": "number-of-pairs-satisfying-inequality",
    "language": "cpp",
    "code": "class  Solution  {   public :   long  long  numberOfPairs ( vector < int >&  nums1 ,  vector < int >&  nums2 ,  int  diff )  {         vector < int >  A ;   for  ( int  i  =  0 ;  i  <  nums1 . size ();  ++ i )   A . push_back ( nums1 [ i ]  -  nums2 [ i ]);   long  ans  =  0 ;   mergeSort ( A ,  0 ,  A . size ()  -  1 ,  diff ,  ans );   return  ans ;   }   private :   void  mergeSort ( vector < int >&  A ,  int  l ,  int  r ,  int  diff ,  long &  ans )  {   if  ( l  >=  r )   return ;   const  int  m  =  ( l  +  r )  /  2 ;   mergeSort ( A ,  l ,  m ,  diff ,  ans );   mergeSort ( A ,  m  +  1 ,  r ,  diff ,  ans );   merge ( A ,  l ,  m ,  r ,  diff ,  ans );   }   void  merge ( vector < int >&  A ,  int  l ,  int  m ,  int  r ,  int  diff ,  long &  ans )  {   const  int  lo  =  m  +  1 ;   int  hi  =  m  +  1 ;      for  ( int  i  =  l ;  i  <=  m ;  ++ i )  {   while  ( hi  <=  r  &&  A [ i ]  >  A [ hi ]  +  diff )   ++ hi ;   ans  +=  r  -  hi  +  1 ;   }   vector < int >  sorted ( r  -  l  +  1 );   int  k  =  0 ;    int  i  =  l ;    int  j  =  m  +  1 ;    while  ( i  <=  m  &&  j  <=  r )   if  ( A [ i ]  <  A [ j ])   sorted [ k ++ ]  =  A [ i ++ ];   else   sorted [ k ++ ]  =  A [ j ++ ];     while  ( i  <=  m )   sorted [ k ++ ]  =  A [ i ++ ];     while  ( j  <=  r )   sorted [ k ++ ]  =  A [ j ++ ];   copy ( sorted . begin (),  sorted . end (),  A . begin ()  +  l );   }  }; "
}