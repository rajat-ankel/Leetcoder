{
    "problemName": "make-object-immutable",
    "language": "cpp",
    "code": "type  RecursiveHandler  =  {   set :  < T  extends  object > ( target :  T ,  prop :  string ,  value :  any )  =>  boolean ;   get :  < T  extends  object > ( target :  T ,  prop :  string )  =>  any ;   apply :  < T  extends  Function > ( target :  T ,  thisArg :  any ,  argArray? :  any )  =>  any ;  };  function  makeImmutable < T  extends  object  |  Function > ( obj :  T ) :  T  {     const  methods  =  new  Set ([   'pop' ,   'push' ,   'shift' ,   'unshift' ,   'splice' ,   'sort' ,   'reverse' ,   ]);   const  handler :  RecursiveHandler  =  {     set ( target ,  prop ,  _ )  {   throw  Array . isArray ( target )   ?  `Error Modifying Index: ${ String ( prop ) } `   :  `Error Modifying: ${ String ( prop ) } ` ;   },       get ( target ,  prop )  {           const  key  =  prop  as  keyof  typeof  target ;   return  prop  ===  'prototype'  ||   target [ key ]  ===  null  ||   ( typeof  target [ key ]  !==  'object'  &&  typeof  target [ key ]  !==  'function' )   ?  target [ key ]   :  new  Proxy ( target [ key ],  this );   },     apply ( target ,  thisArg ,  argumentsList )  {   if  ( methods . has (( target  as  any ). name ))   throw  `Error Calling Method: ${ ( target  as  any ). name } ` ;   return  target . apply ( thisArg ,  argumentsList );   },   };   return  new  Proxy ( obj ,  handler )  as  T ;  } "
}