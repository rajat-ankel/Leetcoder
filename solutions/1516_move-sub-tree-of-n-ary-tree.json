{
    "problemName": "move-sub-tree-of-n-ary-tree",
    "language": "cpp",
    "code": "class  Solution  {   public :   Node *  moveSubTree ( Node *  root ,  Node *  p ,  Node *  q )  {   if  ( find ( q -> children . begin (),  q -> children . end (),  p )  !=  q -> children . end ())   return  root ;     Node *  dummy  =  new  Node ( 0 ,  { root });     Node *  pParent  =  getParent ( dummy ,  p );   Node *  qParent  =  getParent ( p ,  q );     vector < Node *>&  pSiblings  =  pParent -> children ;   const  int  pIndex  =   find ( pSiblings . begin (),  pSiblings . end (),  p )  -  pSiblings . begin ();   pSiblings . erase ( pSiblings . begin ()  +  pIndex );   q -> children . push_back ( p );     if  ( qParent  !=  nullptr )  {   vector < Node *>&  qSiblings  =  qParent -> children ;   std :: erase ( qSiblings ,  q );   pSiblings . insert ( pSiblings . begin ()  +  pIndex ,  q );   }   return  dummy -> children [ 0 ];   }   private :   Node *  getParent ( Node *  root ,  Node *  target )  {   for  ( Node *  child  :  root -> children )  {   if  ( child  ==  target )   return  root ;   Node *  res  =  getParent ( child ,  target );   if  ( res  !=  nullptr )   return  res ;   }   return  nullptr ;   }  }; "
}