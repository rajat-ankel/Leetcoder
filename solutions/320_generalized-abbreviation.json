{
    "problemName": "generalized-abbreviation",
    "language": "cpp",
    "code": "class  Solution  {   public :   vector < string >  generateAbbreviations ( string  word )  {   vector < string >  ans ;   dfs ( word ,  0 ,  0 ,  {},  ans );   return  ans ;   }   private :   void  dfs ( const  string &  word ,  int  i ,  int  count ,  vector < string >&&  path ,   vector < string >&  ans )  {   if  ( i  ==  word . length ())  {   ans . push_back ( join ( path )  +  getCountString ( count ));   return ;   }     dfs ( word ,  i  +  1 ,  count  +  1 ,  move ( path ),  ans );     path . push_back ( getCountString ( count )  +  word [ i ]);     dfs ( word ,  i  +  1 ,  0 ,  move ( path ),  ans );   path . pop_back ();   }   string  getCountString ( int  count )  {   return  count  >  0  ?  to_string ( count )  :  \"\" ;   }   string  join ( const  vector < string >&  path )  {   string  joined ;   for  ( const  string &  s  :  path )   joined  +=  s ;   return  joined ;   };  }; "
}