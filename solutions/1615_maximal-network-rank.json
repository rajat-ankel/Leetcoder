{
    "problemName": "maximal-network-rank",
    "language": "cpp",
    "code": "class  Solution  {   public :   int  maximalNetworkRank ( int  n ,  vector < vector < int >>&  roads )  {   vector < int >  degrees ( n );   for  ( const  vector < int >&  road  :  roads )  {   const  int  u  =  road [ 0 ];   const  int  v  =  road [ 1 ];   ++ degrees [ u ];   ++ degrees [ v ];   }     int  maxDegree1  =  0 ;   int  maxDegree2  =  0 ;   for  ( const  int  degree  :  degrees )  {   if  ( degree  >  maxDegree1 )  {   maxDegree2  =  maxDegree1 ;   maxDegree1  =  degree ;   }  else  if  ( degree  >  maxDegree2 )  {   maxDegree2  =  degree ;   }   }       int  countMaxDegree1  =  0 ;   int  countMaxDegree2  =  0 ;   for  ( const  int  degree  :  degrees )   if  ( degree  ==  maxDegree1 )   ++ countMaxDegree1 ;   else  if  ( degree  ==  maxDegree2 )   ++ countMaxDegree2 ;   if  ( countMaxDegree1  ==  1 )  {           const  int  edgeCount  =   getEdgeCount ( roads ,  degrees ,  maxDegree1 ,  maxDegree2 )  +   getEdgeCount ( roads ,  degrees ,  maxDegree2 ,  maxDegree1 );   return  maxDegree1  +  maxDegree2  -  ( countMaxDegree2  ==  edgeCount  ?  1  :  0 );   }  else  {             const  int  edgeCount  =   getEdgeCount ( roads ,  degrees ,  maxDegree1 ,  maxDegree1 );   const  int  maxPossibleEdgeCount  =   countMaxDegree1  *  ( countMaxDegree1  -  1 )  /  2 ;   return  2  *  maxDegree1  -  ( maxPossibleEdgeCount  ==  edgeCount  ?  1  :  0 );   }   }   private :       int  getEdgeCount ( const  vector < vector < int >>&  roads ,  const  vector < int >&  degrees ,   int  degreeU ,  int  degreeV )  {   int  edgeCount  =  0 ;   for  ( const  vector < int >&  road  :  roads )  {   const  int  u  =  road [ 0 ];   const  int  v  =  road [ 1 ];   if  ( degrees [ u ]  ==  degreeU  &&  degrees [ v ]  ==  degreeV )   ++ edgeCount ;   }   return  edgeCount ;   }  }; "
}